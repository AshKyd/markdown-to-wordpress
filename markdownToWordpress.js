const matter = require("gray-matter");
const marked = require("marked");

function template({ posts, baseurl }) {
  return `<?xml version="1.0" encoding="UTF-8" ?>
    <!-- This is a WordPress eXtended RSS file generated by markdownToWordpress. -->
    <!-- To import this information into a WordPress site follow these steps: -->
    <!-- 1. Log in to that site as an administrator. -->
    <!-- 2. Go to Tools: Import in the WordPress admin panel. -->
    <!-- 3. Install the "WordPress" importer from the list. -->
    <!-- 4. Activate & Run Importer. -->
    <!-- 5. Upload this file using the form provided on that page. -->
    <!-- 6. You will first be asked to map the authors in this export file to users -->
    <!--    on the site. For each author, you may choose to map to an -->
    <!--    existing user on the site or to create a new user. -->
    <!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
    <!--    contained in this file into your site. -->
    
    <!-- generator="WordPress/5.7.1" created="1986-01-01 00:00" -->
    <rss version="2.0"
        xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
        xmlns:content="http://purl.org/rss/1.0/modules/content/"
        xmlns:wfw="http://wellformedweb.org/CommentAPI/"
        xmlns:dc="http://purl.org/dc/elements/1.1/"
        xmlns:wp="http://wordpress.org/export/1.2/"
    >
    <channel>
        <title>Markdown to Wordpress</title>
        <link>https://example.org/</link>
        <description>Just another WordPress weblog</description>
        <pubDate>Sat, 01 Jan 1986 00:00:00 +0000</pubDate>
        <language>en-US</language>
        <wp:wxr_version>1.2</wp:wxr_version>
        <wp:base_site_url>https://example.org/</wp:base_site_url>
        <wp:base_blog_url>https://example.org/</wp:base_blog_url>
    
        <wp:author><wp:author_id>1</wp:author_id>
        <wp:author_login><![CDATA[importer]]></wp:author_login>
        <wp:author_email><![CDATA[importer@example.org]]></wp:author_email>
        <wp:author_display_name><![CDATA[importer]]></wp:author_display_name>
        <wp:author_first_name><![CDATA[]]></wp:author_first_name>
        <wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
    
                    
        <generator>https://wordpress.org/?v=5.7.1</generator>
        <site xmlns="com-wordpress:feed-additions:1">182560316</site>


		<wp:category>
            <wp:term_id>1000</wp:term_id>
            <wp:category_nicename><![CDATA[featured]]></wp:category_nicename>
            <wp:category_parent><![CDATA[]]></wp:category_parent>
            <wp:cat_name><![CDATA[Featured]]></wp:cat_name>
        </wp:category>
    
        ${posts
          .map(
            (post, i) => `
        <item>
            <title><![CDATA[${post.title}]]></title>
            <link>https://example.org/</link>
            <pubDate>${post.date.toUTCString()}</pubDate>
            <dc:creator><![CDATA[${post.author || ""}]]></dc:creator>
            <guid isPermaLink="false">https://example.org/?p=${i}</guid>
            <description></description>
            <content:encoded><![CDATA[${marked(
              (post.image ? `![](${post.image})` : "") + post.content
            )}]]></content:encoded>
            <excerpt:encoded><![CDATA[${
              post.excerpt || post.description || ""
            }]]></excerpt:encoded>
            <wp:post_id>${i}</wp:post_id>
            <wp:post_date><![CDATA[${post.date
              .toISOString()
              .substr(0, 19)
              .replace("T", " ")}]]></wp:post_date>
            <wp:post_date_gmt><![CDATA[${post.date
              .toISOString()
              .substr(0, 19)
              .replace("T", " ")}]]></wp:post_date_gmt>
            <wp:post_modified><![CDATA[${post.updated
              .toISOString()
              .substr(0, 19)
              .replace("T", " ")}]]></wp:post_modified>
            <wp:post_modified_gmt><![CDATA[${post.updated
              .toISOString()
              .substr(0, 19)
              .replace("T", " ")}]]></wp:post_modified_gmt>
            <wp:comment_status><![CDATA[open]]></wp:comment_status>
            <wp:ping_status><![CDATA[open]]></wp:ping_status>
            <wp:post_name><![CDATA[${post.slug}]]></wp:post_name>
            <wp:status><![CDATA[publish]]></wp:status>
            <wp:post_parent>0</wp:post_parent>
            <wp:menu_order>0</wp:menu_order>
            <wp:post_type><![CDATA[post]]></wp:post_type>
            <wp:post_password><![CDATA[]]></wp:post_password>
            <wp:is_sticky>0</wp:is_sticky>
            ${(post.tags || [])
              .map(
                (
                  tag
                ) => `<category domain="post_tag" nicename="${tag}"><![CDATA[${tag}]]></category>
            `
              )
              .join("\n")}
            <wp:postmeta>
                <wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
                <wp:meta_value><![CDATA[1]]></wp:meta_value>
            </wp:postmeta>
            <wp:postmeta>
                <wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
                <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
            </wp:postmeta>
            <category domain="category" nicename="featured"><![CDATA[Featured]]></category>
        </item>`
          )
          .join("\n\n\n\n\n\n\n\n")}
    
    </channel>
    </rss>`;
}

function parseMatter(contentString) {
  // Some weird jsonlike format Hexo uses but gray matter doesn't parse
  if (contentString.includes(";;;")) {
    const [head, content] = contentString.split(";;;");
    let data;
    try {
      data = JSON.parse(`{${head}}`);
    } catch (e) {
      throw new Error("Could not parse head");
    }
    return { data, content };
  }

  return matter(contentString);
}

module.exports = function markdownToWordpress({ fileArray }) {
  const categories = {};

  const posts = fileArray.map(({ path, slug, content }) => {
    const parsed = parseMatter(content);

    let date = parsed.data.date ? new Date(parsed.data.date) : new Date();
    let updated = parsed.data.updated ? new Date(parsed.data.updated) : date;

    return {
      slug,
      ...parsed.data,
      date: date,
      updated: updated,
      content: parsed.content,
      excerpt: parsed.excerpt,
      tags:
        (typeof parsed.data.tags === "string"
          ? [parsed.data.tags]
          : parsed.data.tags) || [],
    };
  });

  return template({ posts });
};
